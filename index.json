
[{"content":"\rLaTeX 学习记录 #\r什么是 LaTeX ？ #\r发音： /ˈlɑːtɛx/ or /ˈleɪtɛx/ or whatever you like 打公式方便？ 「复杂公式输入哪家强，当然首选 LaTEX 帮忙」 写论文神器？ 「想要轻松给论文排版，当然少不了 LaTEX 啦」 不想做宏编程的标记语言不是好的排版引擎？ LaTEX is a high-quality typesetting system; it includes features designed for the production of technical and scientific documentation. LaTEX is the de facto standard for the communication and publication of scientific documents. LaTEX is available as free software. ——What you think is what you get!\n为什么学 LaTeX ？# #\r如果你需要写论文，那么请直接跳到下一节，因为你不学也得学。\nLaTeX 是一种基于 TeX 的排版系统，由图灵奖得主 Lamport 开发，而 Tex 则是由 Knuth 最初开发，这两位都是计算机界的巨擘。当然开发者强并不是我们学习 LaTeX 的理由，LaTeX 和常见的所见即所得的 Word 文档最大的区别就是用户只需要关注写作的内容，而排版则完全交给软件自动完成。这让没有任何排版经验的普通人得以写出排版非常专业的论文或文章。\nBerkeley 计算机系教授 Christos Papadimitriou 曾说过一句半开玩笑的话：\nEvery time I read a LaTeX document, I think, wow, this must be correct!\nLaTeX 的核心特点 #\r专注于内容与结构分离 用户只需关注文档内容（文字、公式、图表等），而无需手动调整格式（字体、间距、分页等）。格式由预定义的模板或样式文件控制。 强大的数学公式支持 LaTeX 是数学、物理、计算机科学等领域的首选工具，因其能轻松处理复杂公式和符号（例如积分、矩阵、方程组等）。 自动化功能 自动生成目录、图表编号、参考文献引用（如通过BibTeX管理文献）。 交叉引用（Cross-referencing）：章节、公式、图表可自动编号并引用。 分页和版面调整由系统智能处理。 高质量输出 生成的PDF文档具有专业级的排版效果，尤其在处理复杂内容时表现优异。 跨平台与免费开源 LaTeX 可在Windows、macOS、Linux上运行，相关工具（如TeX Live、MiKTeX）和模板均免费。 扩展性 通过宏包（如amsmath、graphicx、hyperref）可扩展功能，支持自定义模板。 LaTeX 的典型应用场景 #\r学术论文（尤其是数学、计算机、工程等领域） 书籍、技术报告、幻灯片（如使用beamer宏包） 简历、信件、复杂表格 包含大量公式、算法或代码的文档 LaTeX 的缺点 #\r学习曲线较陡峭：需要掌握基本语法和命令，对新手有一定门槛。 调试复杂：错误提示可能不够直观，需耐心排查代码问题。 实时预览缺失：需编译后才能查看结果，但现代编辑器（如Overleaf、TeXShop）已提供实时预览功能。 一、安装 LaTeX 环境 #\r选择发行版（必备工具包） #\rTeX Live（跨平台，推荐） 下载地址：https://www.tug.org/texlive/ 包含 LaTeX 核心工具和常用宏包，适合所有系统。 MiKTeX（Windows 用户友好） 下载地址：https://miktex.org/ 自动安装缺失的宏包，适合新手。 在线工具（无需安装） Overleaf：在线 LaTeX 编辑器，支持实时协作和模板。 安装编辑器（编写代码的工具） #\rVS Code + LaTeX Workshop 插件（功能强大，适合开发者） TeXstudio（专为 LaTeX 设计，界面友好） Overleaf（在线使用，无需配置环境） 二、编写第一个 LaTeX 文档 #\r基本结构 #\r创建一个 .tex 文件（如 demo.tex），输入以下代码：\n\\documentclass{article} % 文档类（article/report/book等） \\begin{document} Hello, LaTeX! % 正文内容 \\end{document} 核心语法与排版元素 #\r文档结构\n标题、作者、日期：\nLATEX\\title{论文标题} \\author{你的名字} \\date{\\today} \\maketitle % 生成标题 章节与段落：\\section{...}, \\subsection{...}, 段落通过空行分隔。\n列表与表格\n无序列表：\nLATEX\\begin{itemize} \\item 第一项 \\item 第二项 \\end{itemize} 表格示例（使用tabular环境）：\nLATEX\\begin{tabular}{|c|c|} \\hline 姓名 \u0026amp; 分数 \\\\ \\hline 张三 \u0026amp; 90 \\\\ \\hline \\end{tabular} 插入图片\n使用graphicx包：\nLATEX\\usepackage{graphicx} \\includegraphics[width=0.5\\textwidth]{figure.png} % 图片路径 数学公式与算法 #\r数学模式\n行内公式：$E=mc^2$ → E=mc^2E=m**c2\n独立公式：\nLATEX\\[ \\sum_{i=1}^n i = \\frac{n(n+1)}{2} \\] 多行公式（align环境）：\nLATEX\\begin{align} f(x) \u0026amp;= x^2 + 2x + 1 \\\\ \u0026amp;= (x+1)^2 \\end{align} 算法排版\n使用algorithm2e包：\nLATEX\\begin{algorithm}[H] \\KwIn{输入数据} \\KwOut{输出结果} 初始化变量\\; \\While{条件}{ 执行操作\\; } \\caption{算法示例} \\end{algorithm} 参考文献与引用 #\r引用文献\n创建.bib文件，添加文献条目：\nBIBTEX@article{key, author = \u0026#34;作者\u0026#34;, title = \u0026#34;标题\u0026#34;, year = \u0026#34;2023\u0026#34; } 在文档中引用：\nLATEX\\cite{key} % 引用文献 \\bibliography{refs} % 导入.bib文件 交叉引用\n标签与引用：\nLATEX\\section{引言}\\label{sec:intro} 如章节~\\ref{sec:intro} 所述... 幻灯片制作（Beamer） #\rBeamer基础\nLATEX\\documentclass{beamer} \\usetheme{Madrid} % 主题 \\title{你的标题} \\begin{document} \\begin{frame} \\frametitle{第一页} 内容... \\end{frame} \\end{document} 分步动画\n使用\\pause或\\onslide：\nLATEX\\begin{itemize} \\item 第一点 \\pause \\item 第二点 \\end{itemize} 三、编译文档生成 PDF #\r现代 TEX 引擎均可直接生成 PDF • 命令行 • pdflatex /xelatex /lualatex + \u0026lt;文件名\u0026gt;[. tex ] 多次编译：读取并排版中间文件 • 推荐 latexmk ：latexmk [\u0026lt;选项\u0026gt;] [\u0026lt;文件名\u0026gt;] 编辑器 • 按钮的背后仍然是命令 • PATH 环境变量：确定可执行文件的位置 • VS Code ：配置 tools 和 recipes 四、调试与优化 #\r1. 常见错误处理 #\r编译报错：仔细阅读错误信息，定位代码行号，检查拼写或缺失的大括号 {}。 中文乱码：使用 ctex 宏包，并选择 XeLaTeX 编译。 图片不显示：检查文件路径和格式（支持 .png、.pdf、.jpg）。 2. 进阶技巧 #\r分文件编写：将长文档拆分为多个 .tex 文件，用 \\input{file.tex} 合并。\n自定义命令：在导言区定义快捷命令，例如：\n\\newcommand{\\R}{\\mathbb{R}} % 输入 \\R 代表实数集符号 五、学习资源推荐 #\rOverleaf 官方教程：Learn LaTeX in 30 Minutes 书籍：《LaTeX 入门》（刘海洋） 社区：TeX Stack Exchange（提问与解答） ","date":"10 February 2025","externalUrl":null,"permalink":"/posts/latex-learning-record/","section":"Posts","summary":"","title":"Latex Learning Record","type":"posts"},{"content":"","date":"10 February 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"10 February 2025","externalUrl":null,"permalink":"/","section":"Tomato's Blog","summary":"","title":"Tomato's Blog","type":"page"},{"content":"\rNginx 学习记录 #\r一、Nginx 介绍 #\rNginx 是一款高性能的开源 Web 服务器，同时支持反向代理、负载均衡、HTTP 缓存等功能。\n核心优势： 高并发处理：基于事件驱动的异步架构，可轻松支持数万并发连接。 低内存消耗：高效的内存管理机制。 模块化设计：通过模块扩展功能（如 HTTP/2、gzip 压缩等）。 应用场景：静态资源托管、反向代理、API 网关、负载均衡。 二、Web 服务器基础 #\r1. 静态资源托管 #\rserver { listen 80; server_name example.com; root /var/www/html; # 静态文件根目录 location / { index index.html; } } 关键指令： listen：监听端口。 server_name：域名。 root：静态资源存放路径。 2. 配置示例 #\r# 安装 Nginx（Ubuntu） sudo apt update \u0026amp;\u0026amp; sudo apt install nginx # 启动服务 sudo systemctl start nginx sudo systemctl enable nginx 三、Location 指令 #\r1. 语法规则 #\rlocation [匹配模式] URI { # 配置逻辑 } 匹配模式： =：精确匹配（location = /api）。 ^~：前缀匹配（优先级高于正则）。 ~：正则匹配（区分大小写）。 ~*：正则匹配（不区分大小写）。 2. 优先级顺序 #\r精确匹配（=） → 前缀匹配（^~） → 正则匹配（~或~*） → 通用匹配（/） 四、反向代理 #\r1. 基本配置 #\r将请求转发到后端应用服务器（如 Node.js、Java）：\nserver { listen 80; server_name api.example.com; location / { proxy_pass http://localhost:3000; # 后端服务地址 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } 2. 常用指令 #\rproxy_pass：定义后端服务地址。 proxy_set_header：传递客户端请求头。 五、负载均衡 #\r1. 配置策略 #\rhttp { upstream backend { server 192.168.1.101:8080 weight=3; # 权重轮询 server 192.168.1.102:8080; server 192.168.1.103:8080 backup; # 备用服务器 } server { listen 80; location / { proxy_pass http://backend; } } } 负载均衡算法： 轮询（默认）：均匀分配请求。 权重（weight）：指定服务器优先级。 IP Hash：根据客户端 IP 分配固定服务器。 六、技术概要与配置说明 #\r1. 核心技术 #\r事件驱动模型：非阻塞 I/O，高效处理并发。 Master/Worker 架构：Master 管理配置，Worker 处理请求。 热重载：nginx -s reload 不中断服务更新配置。 2. 常用配置片段 #\r# 启用 Gzip 压缩 gzip on; gzip_types text/plain application/json; # 日志配置 access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log warn; 七、Web 服务器部署实战 #\r1. 部署静态网站 #\r将 HTML/CSS/JS 文件放入 /var/www/html。 配置 Nginx Server 块指向该目录。 2. 域名解析 #\r在 DNS 服务商添加 A 记录，将域名指向服务器 IP。 八、域名与 HTTPS 证书配置 #\r1. 使用 Let\u0026rsquo;s Encrypt 免费证书 #\r# 安装 Certbot sudo apt install certbot python3-certbot-nginx # 自动申请并配置证书 sudo certbot --nginx -d example.com -d www.example.com 2. 强制 HTTPS 跳转 #\rserver { listen 80; server_name example.com; return 301 https://$host$request_uri; # 301 重定向到 HTTPS } server { listen 443 ssl; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # 其他 HTTPS 配置... } 九、Docker + Nginx + HTTPS 实战 #\r1. Docker 部署 Nginx #\r# 拉取镜像 docker pull nginx:alpine # 运行容器（挂载配置和证书） docker run -d \\ --name my-nginx \\ -p 80:80 \\ -p 443:443 \\ -v /path/to/nginx.conf:/etc/nginx/nginx.conf \\ -v /path/to/certs:/etc/nginx/certs \\ nginx:alpine 2. 自定义 Dockerfile #\rFROM nginx:alpine COPY nginx.conf /etc/nginx/nginx.conf COPY certs/ /etc/nginx/certs/ EXPOSE 80 443 3. HTTPS 配置整合 #\rserver { listen 443 ssl; server_name docker.example.com; ssl_certificate /etc/nginx/certs/fullchain.pem; ssl_certificate_key /etc/nginx/certs/privkey.pem; location / { proxy_pass http://app:8080; # 代理到其他容器 } } 十、总结 #\rNginx 凭借高性能和灵活性，成为现代 Web 架构的核心组件。通过反向代理、负载均衡和 HTTPS 支持，可构建高可用、安全的服务。结合 Docker 容器化部署，进一步简化运维流程。建议通过实际项目练习，深入掌握配置细节和性能优化技巧。\n注意事项：\n配置修改后务必测试：nginx -t。 定期更新 SSL 证书（Certbot 支持自动续签）。 使用 access_log 和 error_log 定位问题。 ","date":"2 February 2025","externalUrl":null,"permalink":"/posts/nginx-learning-record/","section":"Posts","summary":"","title":"Nginx Learning Record","type":"posts"},{"content":"\rMinecraft教程 #\rStatement：\n请支持正版！！！\n请注意分辨，本人不承担任何因个人操作造成的损失\n本教程是由玩家 Tomato295 编写的，如有疑问\n请移步至邮箱咨询：160783295@qq.com\n一、选择启动器 #\r目前国内的主流启动器有：\nMInecraft Launcher（官方启动器，因为其谜一般的下载速度以及功能性，不推荐）\nHello Minecraft! Launcher（老牌第三方启动器，稳定）\nPlain Craft Launcher 2 （近年来的新兴启动器，功能丰富）\nBakaXL（二刺猿浓度较高的启动器，并且使用体验不错）\n其他启动器（优秀的启动器还有很多，请自行发掘）\n二、选择登录方式 #\rMicrosoft登录（使用微软账号登录，由于Mojang官方的账号迁移，现已经成为绝大部分正版玩家的登录方式）\nMojang登录（使用Mojang账号登录，由于账号迁移政策，现已逐渐退出历史）\n第三方外置登录（使用第三方皮肤站，如Littleskin的验证服务器进行登录验证，属于非正版）\n下面是第三方登录的图解教程（LittleSkin与PCL2启动器为例）：\n离线模式（不过多介绍）\n请支持正版！！！\n三、游戏下载 #\r在此我以Plain Craft Launcher 2 启动器为例。\n操作方式如下图：\n在此我介绍一下这些附加安装：\nOPtifine又叫高清修复，是很多光影的前置，同时也能实现性能优化。但不兼容Fabric，无法同时安装\nForge是MInecraft的主流API目前有50%的mod都在使用Forge\nFabric是一个用于Minecraft1.14+ 的轻量Mod API\nFabric API 必须与Fabric同时安装\nOptifabric 是 Optifine 的 Fabric 版本\nLiteLoader 已过时\n选择好附属安装后等待安装完成即可开始游戏。\n四、其他安装 #\rMod安装 #\r值得一提的是，目前Plain Craft Launcher 2、BakaXL 和Hello Minecraft! Launcher 等第三方启动器均支持启动器内Mod下载，为玩家提供了极大的便利。你也可以在互联网上下载mod文件。（mod的命名一般为 .jar ）\nMod下载完毕后，请放置在你游戏文件夹的 mods 文件夹下。\n注意：\nMod需下载你所安装游戏的对应版本，如1.12.2 的 Forge 版，1.16.5 的 Fabric 版。下载不对应的版本可能会导致游戏出现错误。 Mod的安装不是实时更新的，安装完毕后请重启游戏。 部分mod会依赖于前置mod，需一起下载。 部分mod之前可能会有冲突。 材质包安装 #\r材质包文件请自行在互联网上寻找，一般后缀名为.zip，无需解压，直接放在resourcepacks文件夹下即可在游戏中选择加载。\n与mod一样，材质包需要对应版本。\n光影包安装 #\r光影包需安装Optifine或者Optifabric，也可安装IRIS Shader mod (Fabric) 后\n光影包文件请自行在互联网上寻找，一般后缀名为.zip，无需解压，直接放在shaderpacks文件夹下即可在游戏中的视频设置中选择加载。\n光影包一般没有版本限制，但有部分只支持OPtifine。\n数据包安装 #\r数据包一般可以从网上下载等不同渠道获得。它应该是一个.zip文件或一个文件夹。\n有的.zip文件本身并不是一个数据包，需要解压后提取数据包文件夹。这种情况下，一般数据包来源会有安装流程介绍。 如果不确定，可以打开这个.zip文件，查看里面是否有data文件夹和pack.mcmeta文件。如果有的话这个.zip文件就是数据包本体，可以直接放进datapacks文件夹。 一个文件夹根目录中必须包含pack.mcmeta文件才可以被游戏读取并辨认为数据包。 以下是在单人游戏中安装数据包的方法：\n打开Minecraft。 选择你需要安装数据包的世界，点击“编辑”，然后点击“打开世界文件夹”。 打开其中名为datapacks的文件夹，并将数据包.zip文件或文件夹放入其中。 下次打开世界的时候这个数据包就会被加载，并且优先级最高。 整合包安装 #\r整合包也可直接在启动器中下载安装，也可从互联网下载。\n标准的整合包为.zip格式可直接拖入第三方启动器进行下载安装。\n非标准的整合包可能为一个游戏的打包压缩包，需解压后运行\n五、个性化 #\r更改皮肤\n到此为止，你可能想要摆脱 Steve 和 Alex 的默认皮肤，更改一个属于自己的、更有个性的皮肤。\n皮肤的存储文件命名一般是*.png，可以自行使用工具（如MCSkin 3D）绘制，或在互联网上下载。\n正版用户可以直接前往 Minecraft 官方网站 或者 官方启动器更改皮肤。\n第三方登录可以在所属皮肤站更改皮肤。\n更改披风\n不像皮肤，披风不能被自由定制。玩家只能通过一些活动或事件来获取特定的披风。如果玩家拥有任何披风，就可以选择一件来装备上。一部分客户端Mod可能会提供其自定义的披风，但这些披风对玩家自己或其他安装了相同客户端Mod的玩家以外通常是不可见的。\n更换方式与更改皮肤方式一致。\n目前最常见的披风主要有三个。\n六、游玩教程 #\r未完待续\n","date":"9 August 2022","externalUrl":null,"permalink":"/posts/minecraft-tutorial/","section":"Posts","summary":"","title":"Minecraft Tutorial","type":"posts"},{"content":"\rHello,World! #\r","date":"17 March 2020","externalUrl":null,"permalink":"/posts/my-first-post/","section":"Posts","summary":"","title":"My First Post","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]